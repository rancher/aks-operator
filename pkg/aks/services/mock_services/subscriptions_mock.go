// Code generated by MockGen. DO NOT EDIT.
// Source: ../subscriptions.go
//
// Generated by this command:
//
//	mockgen -destination subscriptions_mock.go -package mock_services -source ../subscriptions.go SubscriptionsClientInterface
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	armsubscriptions "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armsubscriptions"
	services "github.com/rancher/aks-operator/pkg/aks/services"
	gomock "go.uber.org/mock/gomock"
)

// MockPager is a mock of Pager interface.
type MockPager[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockPagerMockRecorder[T]
}

// MockPagerMockRecorder is the mock recorder for MockPager.
type MockPagerMockRecorder[T any] struct {
	mock *MockPager[T]
}

// NewMockPager creates a new mock instance.
func NewMockPager[T any](ctrl *gomock.Controller) *MockPager[T] {
	mock := &MockPager[T]{ctrl: ctrl}
	mock.recorder = &MockPagerMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPager[T]) EXPECT() *MockPagerMockRecorder[T] {
	return m.recorder
}

// More mocks base method.
func (m *MockPager[T]) More() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "More")
	ret0, _ := ret[0].(bool)
	return ret0
}

// More indicates an expected call of More.
func (mr *MockPagerMockRecorder[T]) More() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "More", reflect.TypeOf((*MockPager[T])(nil).More))
}

// NextPage mocks base method.
func (m *MockPager[T]) NextPage(ctx context.Context) (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextPage", ctx)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextPage indicates an expected call of NextPage.
func (mr *MockPagerMockRecorder[T]) NextPage(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextPage", reflect.TypeOf((*MockPager[T])(nil).NextPage), ctx)
}

// MockSubscriptionsClientInterface is a mock of SubscriptionsClientInterface interface.
type MockSubscriptionsClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionsClientInterfaceMockRecorder
}

// MockSubscriptionsClientInterfaceMockRecorder is the mock recorder for MockSubscriptionsClientInterface.
type MockSubscriptionsClientInterfaceMockRecorder struct {
	mock *MockSubscriptionsClientInterface
}

// NewMockSubscriptionsClientInterface creates a new mock instance.
func NewMockSubscriptionsClientInterface(ctrl *gomock.Controller) *MockSubscriptionsClientInterface {
	mock := &MockSubscriptionsClientInterface{ctrl: ctrl}
	mock.recorder = &MockSubscriptionsClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionsClientInterface) EXPECT() *MockSubscriptionsClientInterfaceMockRecorder {
	return m.recorder
}

// NewListLocationsPager mocks base method.
func (m *MockSubscriptionsClientInterface) NewListLocationsPager(subscriptionID string, options *armsubscriptions.ClientListLocationsOptions) services.Pager[armsubscriptions.ClientListLocationsResponse] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListLocationsPager", subscriptionID, options)
	ret0, _ := ret[0].(services.Pager[armsubscriptions.ClientListLocationsResponse])
	return ret0
}

// NewListLocationsPager indicates an expected call of NewListLocationsPager.
func (mr *MockSubscriptionsClientInterfaceMockRecorder) NewListLocationsPager(subscriptionID, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListLocationsPager", reflect.TypeOf((*MockSubscriptionsClientInterface)(nil).NewListLocationsPager), subscriptionID, options)
}
